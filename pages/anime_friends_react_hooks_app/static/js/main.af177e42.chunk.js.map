{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","name","email","profile","className","alt","src","CardList","animeFriends","map","user","i","key","id","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","border","children","App","useState","setAnimeFriends","setSearchfield","useEffect","fetch","then","response","json","users","filteredAnimeFriends","filter","robot","toLowerCase","includes","length","event","target","value","class","href","version","width","height","viewBox","aria-hidden","fill-rule","d","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.af177e42.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, profile }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://princ09.github.io/${profile}`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ animeFriends }) => {\n  return (\n    <div>\n      {\n        animeFriends.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={animeFriends[i].id}\n              profile={animeFriends[i].profile}\n              name={animeFriends[i].name}\n              email={animeFriends[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search Friends'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{border: '5px solid black'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { useState, useEffect } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nfunction App() {\n  const [animeFriends, setAnimeFriends] = useState([])\n  const [searchfield, setSearchfield] = useState('')\n\n  useEffect(()=> {\n    fetch('https://princ09.github.io/json_server/anime.json')\n      .then(response=> response.json())\n      .then(users => {setAnimeFriends(users)});\n    // console.log(count)\n  },[]) // if you add count, only run if count changes.\n\n  const onSearchChange = (event) => {\n    setSearchfield(event.target.value)\n  }\n\n  const filteredAnimeFriends = animeFriends.filter(robot =>{\n    return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n  })\n\n  return !animeFriends.length ?\n    <h1>Loading</h1> :\n    (\n      <div className='tc'>\n        <h1 className='f1'>Anime Friends</h1>\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          <CardList animeFriends={filteredAnimeFriends} />\n        </Scroll>\n        <a class=\"nav-link\" href=\"https://github.com/princ09/anime_friends_react/anime_friends_react_hooks_app\"><span class=\"d-none d-sm-inline\">View on GitHub </span><svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-mark-github\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"></path></svg></a>\n      </div>\n    );\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker(); \n"],"sourceRoot":""}